created: 2017-11-18
tags:
    - vue
    - javacript
    - perl
    - template
---

# Vue-lez Perler avec moi, ce soir?

So, this week I was working on adding relationalish features to 
[DBIx-NoSQL-Store-Manager][], ostenciably to add tagging
functionality to my blog engine. Which is good, but now that I'll have tags, 
I'll also have to change the templates of the blog
to incorporate those tags.

Right now I'm using [Template::Caribou][], a Moose-base template system 
written by your truly. And while I still like it, I'm also playing a lot with
[Vue][] theses days and really, really like the way it does its single
component `.vue` files. So I began to think about server-side rendering.

But then I thought **hmmm.... when I say server-side, I really mean that I
don't care about the reactive magic of Vue, just its template style. So I
wonder, yes, I wonder... how hard would it be to implement it in Perl?**

Yes. That's right. I'm about show you how to implement a very rough, but
working implementation of the Vue template style in Perl. Because that's
exactly what the
world needs. Another template module. 

## The single-component file, Ã  la Perl

So in Vue.js, a single-component file will look something like:

    <template>
        <div>
            <h1>{ title }<h1>
            <ul>
                <Item v-for="item in items" 
                    v-if="item ne 'skip_me'" :label="item"  />
            </ul>
        </div>
    </template>

    <script>
        import Item from './Item';
        export default {
            components: { Item },
            props: [ 'title', 'items' ],
        }
    </script>

For our Perl version, we'll use modules to be our components, and we will
use Perl's natural instinct to ignore POD directives to put the template
smack there at the top.

    package Example::Main;

    =begin template
    <div>
        <h1>{{ title }}</h1>

        <ul>
            <Item v-for="item in items" 
                  v-if="item ne 'skip_me'" 
                  :label="item"  
            />
        </ul>
    </div>

    =cut

    use Template::Vue;

    components 'Example::Item';

    props qw/ title items /;

    1;


[DBIx-NoSQL-Store-Manager]: cpan:DBIx-NoSQL-Store-Manager
